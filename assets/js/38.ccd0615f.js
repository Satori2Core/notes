(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{468:function(t,a,s){t.exports=s.p+"assets/img/githomepage.e467d3fc.png"},469:function(t,a,s){t.exports=s.p+"assets/img/gitdonecreate.edd30678.png"},496:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_0-前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-前言"}},[t._v("#")]),t._v(" 0. 前言")]),t._v(" "),a("p",[t._v("代码仓库的初始化，是每个开发者开启项目的“第一步仪式”。它不仅是代码的“起点档案馆”，更是后续协作开发、版本回溯、问题追踪的核心基石。无论是个人练手的小工具，还是团队协作的复杂系统，一个规范的代码仓库都能让开发过程更有序、更高效。")]),t._v(" "),a("p",[t._v("本文将以我的学习实践为例，从0到1演示以完成一个"),a("code",[t._v("Go")]),t._v("项目的"),a("code",[t._v("Git")]),t._v("仓库初始化全流程——从本地代码的第一次提交，到关联GitHub远程仓库，再到基础的分支管理与协作操作。")]),t._v(" "),a("p",[t._v("本文中将使用一个名为"),a("code",[t._v("GitLearnLab")]),t._v("的实战仓库（你也可以跟着一起创建同名仓库同步练习），通过“边操作、边讲解”的方式，把抽象的"),a("code",[t._v("Git")]),t._v("概念转化为具体的键盘敲击和命令执行。")]),t._v(" "),a("blockquote",[a("p",[t._v("需要说明的是，文中可能会涉及一些"),a("code",[t._v("Git")]),t._v("专业术语（如“暂存区”“分支合并”“Rebase”等），初次接触时不必强求完全理解，后续我会通过系列文章逐一拆解原理。本文的重点是动手实践——毕竟，"),a("code",[t._v("Git")]),t._v("的精髓永远藏在“敲下"),a("code",[t._v("git commit")]),t._v("的那一刻”。")])]),t._v(" "),a("p",[t._v("如果你刚接触"),a("code",[t._v("Git")]),t._v("，不妨跟着步骤一步步操作；如果已有基础，也可以跳过熟悉的部分，重点关注“实战中的小技巧”（比如如何优雅解决合并冲突、如何用"),a("code",[t._v("stash")]),t._v("临时保存未完成代码）。")]),t._v(" "),a("p",[t._v("最后，代码仓库的初始化没有“标准答案”，但本文会分享我的个人经验总结（标注为“注：”的部分），希望能为你提供一个可参考的起点。现在，让我们打开终端，创建第一个Git仓库，正式开启这段“代码版本之旅”吧！")]),t._v(" "),a("blockquote",[a("p",[t._v("文末有本文提及的"),a("code",[t._v("Git")]),t._v("操作及其意义表格供快速参考。")])]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"/notes/noteroot/MiniBlog/%E5%85%B3%E4%BA%8E%E9%A1%B9%E7%9B%AE"}},[t._v("前往系列文章合集")])])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"_1-github-仓库搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-github-仓库搭建"}},[t._v("#")]),t._v(" 1. GitHub 仓库搭建")]),t._v(" "),a("p",[t._v("接下来，不必多说，咱直接从0开始搭建一个"),a("code",[t._v("Git")]),t._v("仓库用于练习操作。")]),t._v(" "),a("blockquote",[a("p",[t._v("在此默认你有一个GitHub账号。")])]),t._v(" "),a("p",[a("strong",[t._v("【第一步：浏览器中直接输入：github.com/你的用户名 => 来到个人主页】")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(468),alt:"GitHub个人主页"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("【第二步：选择创建分支】")])]),t._v(" "),a("p",[a("img",{attrs:{src:"gitcreate.png",alt:"GitHub新建仓库"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("【第三步：输入仓库名，直接创建代码仓库】")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(469),alt:"GitHub完成仓库创建"}})]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"_2-初始化本地仓库与-gitignore配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-初始化本地仓库与-gitignore配置"}},[t._v("#")]),t._v(" 2. 初始化本地仓库与.gitignore配置")]),t._v(" "),a("h3",{attrs:{id:"_2-1-创建项目目录并初始化git仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-创建项目目录并初始化git仓库"}},[t._v("#")]),t._v(" 2.1 创建项目目录并初始化Git仓库")]),t._v(" "),a("p",[t._v("本文将以开发一个"),a("code",[t._v("Go")]),t._v("项目为了示例，进行"),a("code",[t._v("Git")]),t._v("操作练习。【注：不会涉及代码业务内容，无需担心。】")]),t._v(" "),a("p",[a("strong",[t._v("【项目目录建立】")])]),t._v(" "),a("p",[t._v("此处我将从了根目录开始，建立一个目录进行"),a("code",[t._v("Git")]),t._v("练习。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mkdir -> 创建目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -p -> 支持多级目录创建")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" ~/workspace/GitLearnLab\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~/workspace/GitLearnLab\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 示例：start -----------------------------------------------------------------")]),t._v("\ndevuser@vm:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" ~/workspace/GitLearnLab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~/workspace/GitLearnLab\ndevuser@vm:~/workspace/GitLearnLab$ \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 示例：end -------------------------------------------------------------------")]),t._v("\n")])])]),a("hr"),t._v(" "),a("p",[a("strong",[t._v("【初始化Git仓库（生成.git隐藏目录）】")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化Git仓库")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 示例：start -----------------------------------------------------------------")]),t._v("\ndevuser@vm:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" ~/workspace/GitLearnLab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~/workspace/GitLearnLab\n\ndev@vm:~/workspace/GitLearnLab$ ll\ntotal "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\ndev@vm:~/workspace/GitLearnLab$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\nhint: Using "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'master'")]),t._v(" as the name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" the initial branch. This default branch name\nhint: is subject to change. To configure the initial branch name to use "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" all\nhint: of your new repositories, "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("which")]),t._v(" will suppress this warning, call:\nhint: \nhint: \t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" init.defaultBranch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nhint: \nhint: Names commonly chosen instead of "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'master'")]),t._v(" are "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'main'")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'trunk'")]),t._v(" and\nhint: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'development'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" The just-created branch can be renamed via this command:\nhint: \nhint: \t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nInitialized empty Git repository "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" /home/dev/workspace/GitLearnLab/.git/\n\ndev@vm:~/workspace/GitLearnLab$ ll\ntotal "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\ndev@vm:~/workspace/GitLearnLab$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-a")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("  .git                                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# .git 就是刚刚命令生成的")]),t._v("\ndev@vm:~/workspace/GitLearnLab$ \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 示例：end -------------------------------------------------------------------")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"_2-2-关于-gitignore文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-关于-gitignore文件"}},[t._v("#")]),t._v(" 2.2 关于.gitignore文件")]),t._v(" "),a("p",[a("strong",[t._v(".gitignore是Git的核心配置文件")]),t._v("，用于告诉Git哪些文件/目录不需要被追踪（即不会被提交到仓库）。")]),t._v(" "),a("p",[t._v("在项目开发中，我们不会直接提交所有文件，因为可能导致仓库中混入临时文件、依赖缓存、IDE配置等冗余内容，影响仓库整洁和协作效率。")]),t._v(" "),a("ul",[a("li",[t._v("创建.gitignore文件：定义“不追踪的文件” —— 不需要提交的文件。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("【为什么需要.gitignore？】")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("​避免冗余")]),t._v("​：如"),a("code",[t._v("Go")]),t._v("项目的"),a("code",[t._v("go.sum")]),t._v("（依赖校验文件）、"),a("code",[t._v("vendor")]),t._v("目录（依赖缓存）、"),a("code",[t._v("IDE")]),t._v("生成的"),a("code",[t._v(".idea")]),t._v("/"),a("code",[t._v(".vscode")]),t._v("目录等，这些文件无需共享；")]),t._v(" "),a("li",[t._v("​保护隐私​：如本地配置文件（.env）、日志文件（*.log）可能包含敏感信息；")]),t._v(" "),a("li",[t._v("提升性能​：减少"),a("code",[t._v("Git")]),t._v("需要处理的文件数量，加快克隆、拉取等操作速度。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("【使用示例】")])]),t._v(" "),a("p",[t._v("在项目根目录创建.gitignore文件（注意以.开头，隐藏文件）：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建 .gitignore 文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" .gitignore    \n")])])]),a("p",[t._v("用文本编辑器（如nano或VS Code）打开并添加以下内容（根据项目语言调整）：")]),t._v(" "),a("blockquote",[a("p",[t._v("以下仅作为参考，可自定义不需要"),a("code",[t._v(".Git")]),t._v("追踪的内容。")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Go项目通用忽略规则")]),t._v("\n*.log          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略所有日志文件")]),t._v("\n*.tmp          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略临时文件")]),t._v("\ngo.sum         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Go依赖校验文件（可选：若用Go Modules，通常提交；若用dep等工具，可忽略）")]),t._v("\nvendor/        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 依赖缓存目录（如go mod vendor生成的目录）")]),t._v("\nbin/           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编译后的二进制文件（如go build生成的可执行文件）")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# IDE/编辑器忽略规则（根据使用的工具调整）")]),t._v("\n.idea/         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# JetBrains IDE（如GoLand）配置目录")]),t._v("\n.vscode/       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# VS Code配置目录")]),t._v("\n*.suo          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Visual Studio解决方案文件")]),t._v("\n*.ntvs*        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Visual Studio调试文件")]),t._v("\n*.njsproj      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Visual Studio项目文件")]),t._v("\n*.sln          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Visual Studio解决方案文件")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 系统通用忽略规则")]),t._v("\n.DS_Store      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# macOS系统生成的目录元数据")]),t._v("\nThumbs.db      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Windows系统生成的缩略图缓存")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"_3-第一次提交与远程仓库关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-第一次提交与远程仓库关联"}},[t._v("#")]),t._v(" 3. 第一次提交与远程仓库关联")]),t._v(" "),a("h3",{attrs:{id:"_3-1-编写-gitignore-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-编写-gitignore-文件"}},[t._v("#")]),t._v(" 3.1 编写 .gitignore 文件")]),t._v(" "),a("p",[t._v("从此处以制定忽略VsCode配置目录为例，进行操作。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 假设当前已经在～/workspace/GitLearnLab目录下")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" .gitignore\n")])])]),a("p",[t._v("文件中直接写入如下内容：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v(".idea/         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# JetBrains IDE（如GoLand）配置目录")]),t._v("\n.vscode/       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# VS Code配置目录")]),t._v("\n/tmp           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 临时目录")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"_3-2-验证-gitignore是否生效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-验证-gitignore是否生效"}},[t._v("#")]),t._v(" 3.2 验证.gitignore是否生效")]),t._v(" "),a("p",[t._v("可以通过以下命令检查哪些文件会被Git忽略（需安装git-extras工具，或手动验证）：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 手动验证：查看未被追踪的文件（应不包含被忽略的文件）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n")])])]),a("p",[t._v("此时，若"),a("code",[t._v(".gitignore")]),t._v("配置正确，"),a("code",[t._v("git status")]),t._v("应仅显示项目中的有效文件（如后续添加的代码文件），而被忽略的"),a("code",[t._v("vendor/")]),t._v("、"),a("code",[t._v(".idea/")]),t._v("等目录"),a("strong",[t._v("不会被列出")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 操作演示：start -----------------------------------------------------------------")]),t._v("\ndevuser@vm:~/workspace/GitLearnLab$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n位于分支 master\n\n尚无提交\n\n未跟踪的文件:\n  （使用 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <文件>..."')]),t._v(" 以包含要提交的内容）\n        .gitignore\n\n提交为空，但是存在尚未跟踪的文件（使用 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" 建立跟踪）\ndevuser@vm:~/workspace/GitLearnLab$ \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 示例：end -------------------------------------------------------------------")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"_3-3-编写readme-md"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-编写readme-md"}},[t._v("#")]),t._v(" 3.3 编写README.md")]),t._v(" "),a("p",[t._v("通常，项目根目录下的"),a("code",[t._v("README.md")]),t._v("会包含和项目相关的信息，此处我们不做过多赘述。")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("README.md")]),t._v("写入如下内容：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 echo 直接把指定内容写入指定文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"# GitLearnLab 仓库介绍"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" README.md\n")])])]),a("hr"),t._v(" "),a("h3",{attrs:{id:"_3-4-提交操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-提交操作"}},[t._v("#")]),t._v(" 3.4 提交操作")]),t._v(" "),a("p",[t._v("现在，我们有了项目文件和"),a("code",[t._v(".gitignore")]),t._v("，可以执行第一次提交了。遵循“"),a("strong",[t._v("先配置")]),a("code",[t._v(".gitignore")]),t._v("，"),a("strong",[t._v("再提交代码")]),t._v("”的顺序，能避免将冗余文件误提交到仓库。")]),t._v(" "),a("p",[a("strong",[t._v("【步骤1：添加有效文件到暂存区】")])]),t._v(" "),a("p",[t._v("前文指定"),a("code",[t._v("Git")]),t._v("忽略追踪"),a("code",[t._v(".vscode")]),t._v("、"),a("code",[t._v(".idea/")]),t._v("、"),a("code",[t._v("/tmp")]),t._v("的内容，同时新增了"),a("code",[t._v("README.md")]),t._v("作为有效提交文件。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加所有未跟踪的有效文件（包括.gitignore）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意：. 表示当前目录所有未忽略的文件（.gitignore本身会被追踪）")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git 命令")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# add 执行的操作")]),t._v("\n")])])]),a("p",[a("strong",[t._v("【步骤2：提交到本地仓库】")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用如下命令添加本次提交的信息说明。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"feat: 初始化项目，添加主程序及.gitignore配置"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git 命令")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# commit 执行的操作：提交信息")]),t._v("\n")])])]),a("p",[a("strong",[t._v("【步骤3：查看提交记】")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 应显示一条提交记录，包含`.gitignore`和`main.go`的修改")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log  \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git 命令")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# log 执行的操作：日志")]),t._v("\n")])])]),a("hr"),t._v(" "),a("p",[a("strong",[t._v("【操作演示】")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 操作演示：start -----------------------------------------------------------------")]),t._v("\ndevuser@vm:~/workspace/GitLearnLab$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\ndevuser@vm:~/workspace/GitLearnLab$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"feat: 初始化项目，添加主程序及.gitignore配置"')]),t._v("\n作者身份未知\n\n*** 请告诉我您是谁。    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 出现这个内容是由于我们安装git后没有进行任何配置，解决操作可看后文")]),t._v("\n\n运行\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" user.email "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"you@example.com"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Your Name"')]),t._v("\n\n来设置您账号的缺省身份标识。\n如果仅在本仓库设置身份标识，则省略 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" 参数。\n\nfatal: 无法自动探测邮件地址（得到 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'devuser@vm.(none)'")]),t._v("）\ndevuser@vm:~/workspace/GitLearnLab$ \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 示例：end -------------------------------------------------------------------")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);