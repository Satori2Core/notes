(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{462:function(s,t,a){s.exports=a.p+"assets/img/runstartpro.d3a71e7a.png"},463:function(s,t,a){s.exports=a.p+"assets/img/webpage.e827c4cc.png"},464:function(s,t,a){s.exports=a.p+"assets/img/webpageindex.c39011ed.png"},465:function(s,t,a){s.exports=a.p+"assets/img/allcode.909badb9.png"},493:function(s,t,a){"use strict";a.r(t);var e=a(2),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),t("p",[s._v("本文中使用的前端脚手架是：Ant Design Pro")]),s._v(" "),t("p",[s._v("作为后端开发者，我们的核心需求是「快速让前端页面跑起来」——不需要复杂的前端工程化知识，不需要从头搭建环境，重点是复用现成工具，把精力放在「数据展示」和「业务对接」上。")]),s._v(" "),t("p",[s._v("本文用最短路径，教你用Ant Design Pro（以下简称「Pro」）从0到1搭一个可视化页面，并解释每一步的目标、操作、原因​（后端视角）。")]),s._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://pro.ant.design/zh-CN/",target:"_blank",rel:"noopener noreferrer"}},[s._v("官网地址"),t("OutboundLink")],1)])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"_1-目标明确-我们要做什么-​"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-目标明确-我们要做什么-​"}},[s._v("#")]),s._v(" 1. 目标明确：我们要做什么？​")]),s._v(" "),t("p",[s._v("最终目标是：用Pro生成一个包含「数据看板」的基础中后台页面，页面能展示后端API返回的数据（如用户管理系统的用户数据表格），并支持基础交互（如筛选、跳转）。")]),s._v(" "),t("p",[t("strong",[s._v("【为什么选Pro？​】")])]),s._v(" "),t("ul",[t("li",[s._v("开箱即用：内置React环境、路由、状态管理（Umi框架），无需手动配置Webpack/Vite。")]),s._v(" "),t("li",[s._v("模板丰富：直接提供仪表盘、列表页等中后台常用页面模板，改数据就能用。")]),s._v(" "),t("li",[s._v("适配后端：支持快速对接现有API（通过mock或代理），减少前后端联调成本。")])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"_2-环境准备-目标-让pro能跑起来-​"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-环境准备-目标-让pro能跑起来-​"}},[s._v("#")]),s._v(" 2. 环境准备（目标：让Pro能跑起来）​")]),s._v(" "),t("blockquote",[t("p",[s._v("环境背景：本文基于 ​Ubuntu 24.04​ 系统，后端开发者对Linux环境更熟悉，Windows/macOS用户可参考调整命令。")])]),s._v(" "),t("p",[t("strong",[s._v("操作步骤")])]),s._v(" "),t("ul",[t("li",[s._v("安装："),t("code",[s._v("Nodejs")]),s._v("、"),t("code",[s._v("npm")])])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 步骤1：更新包索引（可选，但推荐）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" update\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 步骤2：安装Node.js（v18+）和npm（随Node.js自动安装）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-y")]),s._v(" nodejs "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v("\n")])])]),t("ul",[t("li",[s._v("安装验证")])]),s._v(" "),t("blockquote",[t("p",[s._v("安装完成后，通过以下命令确认版本（Node.js≥14，npm≥6即可）：")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出类似9.2.0（版本号≥6即可）")]),s._v("\nnodejs "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-v")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出类似v18.19.1（版本号≥14即可）")]),s._v("\n")])])]),t("hr"),s._v(" "),t("h2",{attrs:{id:"_3-初始化项目-目标-生成基础框架-​"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-初始化项目-目标-生成基础框架-​"}},[s._v("#")]),s._v(" 3. 初始化项目（目标：生成基础框架）​")]),s._v(" "),t("p",[t("strong",[s._v("操作步骤")])]),s._v(" "),t("blockquote",[t("p",[s._v("Pro官方推荐通过 pro create 命令快速创建项目（本质是基于Umi的脚手架封装）。")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 步骤1：全局安装Pro CLI（首次使用需要）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-g")]),s._v(" @ant-design/pro-cli\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 步骤2：创建项目（交互式选择模板）")]),s._v("\npro create myapp\n")])])]),t("p",[t("strong",[s._v("关键选择")])]),s._v(" "),t("p",[s._v("执行 pro create myapp 后，终端会提示选择模板类型。​建议选「simple」​​（精简版）：")]),s._v(" "),t("ul",[t("li",[s._v("不需要完整的企业级功能（如多租户、复杂权限）；")]),s._v(" "),t("li",[s._v("减少冗余代码，更快跑通基础流程。")])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"_4-启动项目-目标-验证环境是否正常-​"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-启动项目-目标-验证环境是否正常-​"}},[s._v("#")]),s._v(" 4. 启动项目（目标：验证环境是否正常）​")]),s._v(" "),t("blockquote",[t("p",[s._v("执行完创建命令后，会生成一个名为 myapp 的项目文件夹。通过以下命令查看目录结构：")])]),s._v(" "),t("p",[t("strong",[s._v("操作步骤")])]),s._v(" "),t("ul",[t("li",[s._v("生成项目目录")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" myapp\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出应包含config、src、public、package.json等核心文件")]),s._v("\nconfig  jest.config.ts  jsconfig.json  mock  node_modules  package.json  package-lock.json  pnpm-lock.yaml  public  README.md  src  tests  tsconfig.json  types\n")])])]),t("ul",[t("li",[s._v("安装依赖并启动")])]),s._v(" "),t("blockquote",[t("p",[s._v("实际就是找到package.json，去下载dependencies列表里的内容。")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 步骤1：安装项目依赖（首次需要）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 等待下载完成（约1-2分钟，视网络速度）")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 步骤2：启动本地开发服务")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run start\n")])])]),t("p",[t("img",{attrs:{src:a(462),alt:"启动项目"}})]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"_5-成果预览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-成果预览"}},[s._v("#")]),s._v(" 5. 成果预览")]),s._v(" "),t("blockquote",[t("p",[s._v("登陆界面")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(463),alt:"web前端"}})]),s._v(" "),t("blockquote",[t("p",[s._v("主页样式")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(464),alt:"简单主页"}})]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"_6-项目目录简单认识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-项目目录简单认识"}},[s._v("#")]),s._v(" 6. 项目目录简单认识")]),s._v(" "),t("blockquote",[t("p",[s._v("框架代码目录说明")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(465),alt:"项目目录认识"}})]),s._v(" "),t("h3",{attrs:{id:"_6-1-目录结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-目录结构"}},[s._v("#")]),s._v(" 6.1 目录结构")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("├── config                   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# umi 配置，包含路由，构建等配置")]),s._v("\n├── mock                     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 本地模拟数据")]),s._v("\n├── public\n│   └── favicon.png          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Favicon")]),s._v("\n├── src\n│   ├── assets               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 本地静态资源")]),s._v("\n│   ├── components           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 业务通用组件")]),s._v("\n│   ├── e2e                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 集成测试用例")]),s._v("\n│   ├── layouts              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通用布局")]),s._v("\n│   ├── models               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 全局 dva model")]),s._v("\n│   ├── pages                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 业务页面入口和常用模板")]),s._v("\n│   ├── services             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 后台接口服务")]),s._v("\n│   ├── utils                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 工具库")]),s._v("\n│   ├── locales              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 国际化资源")]),s._v("\n│   ├── global.less          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 全局样式")]),s._v("\n│   └── global.ts            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 全局 JS")]),s._v("\n├── tests                    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 测试工具")]),s._v("\n├── README.md\n└── package.json\n")])])]),t("hr"),s._v(" "),t("h3",{attrs:{id:"_6-2-页面代码结构推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-页面代码结构推荐"}},[s._v("#")]),s._v(" 6.2 页面代码结构推荐")]),s._v(" "),t("p",[s._v("为了让项目代码组织更加规范，让开发能够更方便的定位到相关页面组件代码，官方定义了一套规范，该规范当前只作为推荐的指导，并非强制。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("src\n├── components\n└── pages\n    ├── Welcome        // 路由组件下不应该再包含其他路由组件，基于这个约定就能清楚的区分路由组件和非路由组件了\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   ├── components // 对于复杂的页面可以再自己做更深层次的组织，但建议不要超过三层\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   ├── Form.tsx\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   ├── index.tsx  // 页面组件的代码\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   └── index.less // 页面样式\n    ├── Order          // 路由组件下不应该再包含其他路由组件，基于这个约定就能清楚的区分路由组件和非路由组件了\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   ├── index.tsx\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   └── index.less\n    ├── User\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   ├── components // group 下公用的组件集合\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   ├── Login      // group 下的页面 Login\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   ├── Register   // group 下的页面 Register\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   └── util.ts    // 这里可以有一些共用方法之类，不做推荐和约束，看业务场景自行做组织\n    └── *              // 其它页面组件代码\n")])])]),t("p",[s._v("所有路由组件（会配置在路由配置中的组件），推荐以大驼峰命名打平到 pages 下面第一级（复杂的项目可以增加 group 层级，在 group 下放置 pages）。不建议在路由组件内部再嵌套路由组件 - 不方便分辨一个组件是否是路由组件，而且不方便快速从全局定位到路由组件。")]),s._v(" "),t("p",[s._v("推荐尽可能的拆分路由组件为更细粒度的组件，对于多个页面可能会用到的组件我们推荐放到 src/components 中，对于只是被单个页面依赖的（区块）组件，推荐就近维护到路由组件文件夹下即可。")]),s._v(" "),t("hr")])}),[],!1,null,null,null);t.default=n.exports}}]);